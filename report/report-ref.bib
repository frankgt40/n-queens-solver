
@article{russell_modern_1995,
	title = {A modern approach},
	volume = {25},
	journal = {Artificial Intelligence. Prentice-Hall, Egnlewood Cliffs},
	author = {Russell, Stuart and Norvig, Peter and Intelligence, Artificial},
	year = {1995},
	pages = {27},
	file = {Fulltext:/Users/frankgt40/Zotero/storage/USTIK8BT/Russell et al. - 1995 - A modern approach.pdf:application/pdf;Snapshot:/Users/frankgt40/Zotero/storage/G59V2X6X/Russell et al. - 1995 - A modern approach.pdf:application/pdf}
}

@misc{noauthor_a000170_nodate,
	title = {A000170 - {OEIS}},
	url = {https://oeis.org/A000170},
	urldate = {2017-11-27},
	file = {A000170 - OEIS:/Users/frankgt40/Zotero/storage/LQQKNC9G/A000170.html:text/html}
}

@book{ball_mathematical_1914,
	title = {Mathematical recreations and essays},
	publisher = {MacMillan},
	author = {Ball, Walter William Rouse},
	year = {1914},
	file = {Fulltext:/Users/frankgt40/Zotero/storage/5MZ3GXFA/books.html:text/html;Snapshot:/Users/frankgt40/Zotero/storage/4QD7M3FV/books.html:text/html}
}

@article{bernhardsson_explicit_1991,
	title = {Explicit {Solutions} to the {N}-queens {Problem} for {All} {N}},
	volume = {2},
	issn = {0163-5719},
	url = {http://doi.acm.org/10.1145/122319.122322},
	doi = {10.1145/122319.122322},
	abstract = {The n-queens problem is often used as a benchmark problem for AI research and in combinatorial optimization. An example is the recent article [1] in this magazine that presented a polynomial time algorithm for finding a solution. Several CPU-hours were spent finding solutions for some n up to 500,000.},
	number = {2},
	urldate = {2017-11-27},
	journal = {SIGART Bull.},
	author = {Bernhardsson, Bo},
	month = feb,
	year = {1991},
	pages = {7--},
	file = {ACM Full Text PDF:/Users/frankgt40/Zotero/storage/HVGHTCXA/Bernhardsson - 1991 - Explicit Solutions to the N-queens Problem for All.pdf:application/pdf}
}

@misc{noauthor_dancing_2017,
	title = {Dancing {Links}},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Dancing_Links&oldid=798816077},
	abstract = {In computer science, dancing links is the technique suggested by Donald Knuth to efficiently implement his Algorithm X. Algorithm X is a recursive, nondeterministic, depth-first, backtracking algorithm that finds all solutions to the exact cover problem. Some of the better-known exact cover problems include tiling, the n queens problem, and Sudoku.
The name dancing links stems from the way the algorithm works, as iterations of the algorithm cause the links to "dance" with partner links so as to resemble an "exquisitely choreographed dance." Knuth credits Hiroshi Hitotsumatsu and Kōhei Noshita with having invented the idea in 1979, but it is his paper which has popularized it.},
	language = {en},
	urldate = {2017-11-25},
	journal = {Wikipedia},
	month = sep,
	year = {2017},
	note = {Page Version ID: 798816077},
	file = {Snapshot:/Users/frankgt40/Zotero/storage/DMH7ZGTT/index.html:text/html}
}

@misc{noauthor_knuths_2016,
	title = {Knuth's {Algorithm} {X}},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Knuth%27s_Algorithm_X&oldid=738699208},
	abstract = {"Algorithm X" is the name Donald Knuth used in his paper "Dancing Links" to refer to "the most obvious trial-and-error approach" for finding all solutions to the exact cover problem. Technically, Algorithm X is a recursive, nondeterministic, depth-first, backtracking algorithm. While Algorithm X is generally useful as a succinct explanation of how the exact cover problem may be solved, Knuth's intent in presenting it was merely to demonstrate the utility of the dancing links technique via an efficient implementation he called DLX.
The exact cover problem is represented in Algorithm X using a matrix A consisting of 0s and 1s. The goal is to select a subset of the rows so that the digit 1 appears in each column exactly once.
Algorithm X functions as follows:

The nondeterministic choice of r means that the algorithm essentially clones itself into independent subalgorithms; each subalgorithm inherits the current matrix A, but reduces it with respect to a different row r. If column c is entirely zero, there are no subalgorithms and the process terminates unsuccessfully.
The subalgorithms form a search tree in a natural way, with the original problem at the root and with level k containing each subalgorithm that corresponds to k chosen rows. Backtracking is the process of traversing the tree in preorder, depth first.
Any systematic rule for choosing column c in this procedure will find all solutions, but some rules work much better than others. To reduce the number of iterations, Knuth suggests that the column choosing algorithm select a column with the lowest number of 1s in it.},
	language = {en},
	urldate = {2017-11-25},
	journal = {Wikipedia},
	month = sep,
	year = {2016},
	note = {Page Version ID: 738699208},
	file = {Snapshot:/Users/frankgt40/Zotero/storage/X8NJBI8S/index.html:text/html}
}

@misc{noauthor_exact_2017,
	title = {Exact cover},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Exact_cover&oldid=796864531},
	abstract = {In mathematics, given a collection 
  
    
      
        
          
            S
          
        
      
    
    \{{\textbackslash}displaystyle \{{\textbackslash}mathcal \{S\}\}\}
   of subsets of a set X, an exact cover is a subcollection 
  
    
      
        
          
            
              S
            
          
          
            ∗
          
        
      
    
    \{{\textbackslash}displaystyle \{{\textbackslash}mathcal \{S\}\}{\textasciicircum}\{*\}\}
   of 
  
    
      
        
          
            S
          
        
      
    
    \{{\textbackslash}displaystyle \{{\textbackslash}mathcal \{S\}\}\}
   such that each element in X is contained in exactly one subset in 
  
    
      
        
          
            
              S
            
          
          
            ∗
          
        
      
    
    \{{\textbackslash}displaystyle \{{\textbackslash}mathcal \{S\}\}{\textasciicircum}\{*\}\}
  . One says that each element in X is covered by exactly one subset in 
  
    
      
        
          
            
              S
            
          
          
            ∗
          
        
      
    
    \{{\textbackslash}displaystyle \{{\textbackslash}mathcal \{S\}\}{\textasciicircum}\{*\}\}
  . An exact cover is a kind of cover.
In computer science, the exact cover problem is a decision problem to determine if an exact cover exists. The exact cover problem is NP-complete and is one of Karp's 21 NP-complete problems. The exact cover problem is a kind of constraint satisfaction problem.
An exact cover problem can be represented by an incidence matrix or a bipartite graph.
Knuth's Algorithm X is an algorithm that finds all solutions to an exact cover problem. DLX is the name given to Algorithm X when it is implemented efficiently using Donald Knuth's Dancing Links technique on a computer.
The standard exact cover problem can be generalized slightly to involve not only "exactly one" constraints but also "at-most-one" constraints.
Finding Pentomino tilings and solving Sudoku are noteworthy examples of exact cover problems. The N queens problem is a slightly generalized exact cover problem.},
	language = {en},
	urldate = {2017-11-25},
	journal = {Wikipedia},
	month = aug,
	year = {2017},
	note = {Page Version ID: 796864531},
	file = {Snapshot:/Users/frankgt40/Zotero/storage/5JD898WZ/index.html:text/html}
}

@inproceedings{hu_swarm_2003,
	title = {Swarm intelligence for permutation optimization: a case study of n-queens problem},
	shorttitle = {Swarm intelligence for permutation optimization},
	doi = {10.1109/SIS.2003.1202275},
	abstract = {This paper introduces a modified particle swarm optimizer which deals with permutation problems. Particles are defined as permutations of a group of unique values. Velocity updates are redefined based on the similarity of two particles. Particles change their permutations with a random rate defined by their velocities. A mutation factor is introduced to prevent the current pBest from becoming stuck at local minima. Preliminary study on the n-queens problem shows that the modified PSO is promising in solving constraint satisfaction problems.},
	booktitle = {Proceedings of the 2003 {IEEE} {Swarm} {Intelligence} {Symposium}, 2003. {SIS} '03},
	author = {Hu, Xiaohui and Eberhart, R. C. and Shi, Yuhui},
	month = apr,
	year = {2003},
	keywords = {Artificial intelligence, Artificial neural networks, Benchmark testing, Biomedical engineering, Computer aided software engineering, Concurrent computing, constraint satisfaction problems, constraint theory, evolutionary computation, Genetic algorithms, Genetic mutations, modified particle swarm optimizer, mutation factor, n-queens problem, Optical computing, optimisation, Particle swarm optimization, pBest, permutation optimization, problem solving, PSO, search problems, swarm intelligence, unique values, velocity updates},
	pages = {243--246},
	file = {IEEE Xplore Abstract Record:/Users/frankgt40/Zotero/storage/7CZ7UHSS/1202275.html:text/html;SIS2003Permutation.pdf:/Users/frankgt40/Zotero/storage/EJCU8R45/SIS2003Permutation.pdf:application/pdf}
}

@misc{noauthor_a002562_nodate,
	title = {A002562 - {OEIS}},
	url = {https://oeis.org/A002562},
	urldate = {2017-11-25},
	file = {A002562 - OEIS:/Users/frankgt40/Zotero/storage/JJPEGABU/A002562.html:text/html}
}

@misc{noauthor_eight_2017,
	title = {Eight queens puzzle},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle&oldid=811616720},
	abstract = {The eight queens puzzle is the problem of placing eight chess queens on an 8×8 chessboard so that no two queens threaten each other. Thus, a solution requires that no two queens share the same row, column, or diagonal. The eight queens puzzle is an example of the more general n queens problem of placing n non-attacking queens on an n×n chessboard, for which solutions exist for all natural numbers n with the exception of n=2 and n=3.},
	language = {en},
	urldate = {2017-11-25},
	journal = {Wikipedia},
	month = nov,
	year = {2017},
	note = {Page Version ID: 811616720},
	file = {Snapshot:/Users/frankgt40/Zotero/storage/BG2YZNJ5/index.html:text/html}
}

@article{sosic_polynomial_1990,
	title = {A {Polynomial} {Time} {Algorithm} for the {N}-{Queens} {Problem}},
	volume = {1},
	issn = {0163-5719},
	url = {http://doi.acm.org/10.1145/101340.101343},
	doi = {10.1145/101340.101343},
	abstract = {The n-queens problem is a classical combinatorial problem in the artificial intelligence (AI) area. Since the problem has a simple and regular structure, it has been widely used as a testbed to develop and benchmark new AI search problem-solving strategies. Recently, this problem has found practical applications in VLSI testing and traffic control. Due to its inherent complexity, currently even very efficient AI search algorithms developed so far can only find a solution for the n-queens problem with n up to about 100. In this paper we present a new, probabilistic local search algorithm which is based on a gradient-based heuristic. This efficient algorithm is capable of finding a solution for extremely large size n-queens problems. We give the execution statistics for this algorithm with n up to 500,000.},
	number = {3},
	urldate = {2017-11-25},
	journal = {SIGART Bull.},
	author = {Sosic, Rok and Gu, Jun},
	month = oct,
	year = {1990},
	pages = {7--11},
	file = {ACM Full Text PDF:/Users/frankgt40/Zotero/storage/2KGZJWAR/Sosic and Gu - 1990 - A Polynomial Time Algorithm for the N-Queens Probl.pdf:application/pdf}
}

@article{knuth_dancing_2000,
	title = {Dancing links},
	url = {http://arxiv.org/abs/cs/0011047},
	abstract = {The author presents two tricks to accelerate depth-first search algorithms for a class of combinatorial puzzle problems, such as tiling a tray by a fixed set of polyominoes. The first trick is to implement each assumption of the search with reversible local operations on doubly linked lists. By this trick, every step of the search affects the data incrementally. The second trick is to add a ghost square that represents the identity of each polyomino. Thus puts the rule that each polyomino be used once on the same footing as the rule that each square be covered once. The coding simplifies to a more abstract form which is equivalent to 0-1 integer programming. More significantly for the total computation time, the search can naturally switch between placing a fixed polyomino or covering a fixed square at different stages, according to a combined heuristic. Finally the author reports excellent performance for his algorithm for some familiar puzzles. These include tiling a hexagon by 19 hexiamonds and the N queens problem for N up to 18.},
	urldate = {2017-11-25},
	journal = {arXiv:cs/0011047},
	author = {Knuth, Donald E.},
	month = nov,
	year = {2000},
	note = {arXiv: cs/0011047},
	keywords = {Computer Science - Data Structures and Algorithms},
	annote = {Comment: Abstract added by Greg Kuperberg},
	file = {arXiv\:cs/0011047 PDF:/Users/frankgt40/Zotero/storage/948GYWW4/Knuth - 2000 - Dancing links.pdf:application/pdf;arXiv.org Snapshot:/Users/frankgt40/Zotero/storage/WD2QVFDX/0011047.html:text/html}
}

@article{bell_survey_2009,
	title = {A survey of known results and research areas for n-queens},
	volume = {309},
	issn = {0012-365X},
	url = {http://www.sciencedirect.com/science/article/pii/S0012365X07010394},
	doi = {10.1016/j.disc.2007.12.043},
	abstract = {In this paper we survey known results for the n-queens problem of placing n nonattacking queens on an n×n chessboard and consider extensions of the problem, e.g. other board topologies and dimensions. For all solution constructions, we either give the construction, an outline of it, or a reference. In our analysis of the modular board, we give a simple result for finding the intersections of diagonals. We then investigate a number of open research areas for the problem, stating several existing and new conjectures. Along with the known results for n-queens that we discuss, we also give a history of the problem. In particular, we note that the first proof that n nonattacking queens can always be placed on an n×n board for n{\textgreater}3 is by E. Pauls, rather than by W. Ahrens who is typically cited. We have attempted in this paper to discuss all the mathematical literature in all languages on the n-queens problem. However, we look only briefly at computational approaches.},
	number = {1},
	urldate = {2017-11-23},
	journal = {Discrete Mathematics},
	author = {Bell, Jordan and Stevens, Brett},
	month = jan,
	year = {2009},
	keywords = {-queens problem, Chessboard graph, Chessboard problems, Modular -queens problem, Queens graph},
	pages = {1--31},
	file = {ScienceDirect Full Text PDF:/Users/frankgt40/Zotero/storage/9ZAB4TEB/Bell and Stevens - 2009 - A survey of known results and research areas for n.pdf:application/pdf;ScienceDirect Snapshot:/Users/frankgt40/Zotero/storage/TQJ8SQZN/S0012365X07010394.html:text/html}
}

@article{hoffman_constructions_1969,
	title = {Constructions for the {Solution} of the m {Queens} {Problem}},
	volume = {42},
	issn = {0025-570X},
	url = {http://www.jstor.org/stable/2689192},
	doi = {10.2307/2689192},
	number = {2},
	urldate = {2017-12-08},
	journal = {Mathematics Magazine},
	author = {Hoffman, E. J. and Loessi, J. C. and Moore, R. C.},
	year = {1969},
	pages = {66--72},
	file = {JSTOR Full Text PDF:/Users/frankgt40/Zotero/storage/YBFSVIX8/Hoffman et al. - 1969 - Constructions for the Solution of the m Queens Pro.pdf:application/pdf}
}

@article{bernhardsson_explicit_1991-1,
	title = {Explicit {Solutions} to the {N}-queens {Problem} for {All} {N}},
	volume = {2},
	issn = {0163-5719},
	url = {http://doi.acm.org/10.1145/122319.122322},
	doi = {10.1145/122319.122322},
	abstract = {The n-queens problem is often used as a benchmark problem for AI research and in combinatorial optimization. An example is the recent article [1] in this magazine that presented a polynomial time algorithm for finding a solution. Several CPU-hours were spent finding solutions for some n up to 500,000.},
	number = {2},
	urldate = {2017-12-08},
	journal = {SIGART Bull.},
	author = {Bernhardsson, Bo},
	month = feb,
	year = {1991},
	pages = {7--},
	file = {ACM Full Text PDF:/Users/frankgt40/Zotero/storage/Q5VYJQF3/Bernhardsson - 1991 - Explicit Solutions to the N-queens Problem for All.pdf:application/pdf}
}

@misc{noauthor_accepted_2015,
	title = {Accepted 4ms c++ solution use backtracking and bitmask, easy understand.},
	url = {https://discuss.leetcode.com/topic/13617/accepted-4ms-c-solution-use-backtracking-and-bitmask-easy-understand},
	abstract = {In this problem, we can go row by row, and in each position, we need to check if the column, the 45° diagonal and the 135° diagonal had a queen before. Solution A: Directly check the validity of each position, 12ms: class Solution \{\vphantom{\}} public:     std::vecto...},
	urldate = {2017-12-14},
	journal = {LeetCode Discuss},
	month = may,
	year = {2015},
	file = {Snapshot:/Users/frankgt40/Zotero/storage/K249JWBI/accepted-4ms-c-solution-use-backtracking-and-bitmask-easy-understand.html:text/html}
}